//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IOrdersClient {
    /**
     * @param computeDurations (optional) 
     * @param count (optional) Defines if the total element count should be computed. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#count
     * @param skip (optional) Defines how many elements to skip. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#top-and-skip
     * @param top (optional) Defines how many elements to return. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#top-and-skip
     * @param filter (optional) Defines the filtering expression. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter
     * @param orderBy (optional) Defines the ordering expression. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#orderby
     * @param apply (optional) Defines the Aggregation behavior. ref: http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs01/odata-data-aggregation-ext-v4.0-cs01.html#_Toc378326289
     * @return Success
     */
    getOdata(computeDurations?: boolean | undefined, count?: boolean | null | undefined, skip?: number | null | undefined, top?: number | null | undefined, filter?: string | null | undefined, orderBy?: string | null | undefined, apply?: string | null | undefined): Observable<OrderManagedPageResult>;
    /**
     * @param body (optional) 
     * @return Success
     */
    upsert(body?: Order | undefined): Observable<void>;
    /**
     * @return Success
     */
    delete(id: number): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class OrdersClient implements IOrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/";
    }

    /**
     * @param computeDurations (optional) 
     * @param count (optional) Defines if the total element count should be computed. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#count
     * @param skip (optional) Defines how many elements to skip. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#top-and-skip
     * @param top (optional) Defines how many elements to return. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#top-and-skip
     * @param filter (optional) Defines the filtering expression. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#filter
     * @param orderBy (optional) Defines the ordering expression. ref: https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview#orderby
     * @param apply (optional) Defines the Aggregation behavior. ref: http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs01/odata-data-aggregation-ext-v4.0-cs01.html#_Toc378326289
     * @return Success
     */
    getOdata(computeDurations?: boolean | undefined, count?: boolean | null | undefined, skip?: number | null | undefined, top?: number | null | undefined, filter?: string | null | undefined, orderBy?: string | null | undefined, apply?: string | null | undefined): Observable<OrderManagedPageResult> {
        let url_ = this.baseUrl + "/api/orders/odata?";
        if (computeDurations === null)
            throw new Error("The parameter 'computeDurations' cannot be null.");
        else if (computeDurations !== undefined)
            url_ += "ComputeDurations=" + encodeURIComponent("" + computeDurations) + "&";
        if (count !== undefined && count !== null)
            url_ += "$count=" + encodeURIComponent("" + count) + "&";
        if (skip !== undefined && skip !== null)
            url_ += "$skip=" + encodeURIComponent("" + skip) + "&";
        if (top !== undefined && top !== null)
            url_ += "$top=" + encodeURIComponent("" + top) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "$filter=" + encodeURIComponent("" + filter) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "$orderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (apply !== undefined && apply !== null)
            url_ += "$apply=" + encodeURIComponent("" + apply) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOdata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOdata(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderManagedPageResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderManagedPageResult>;
        }));
    }

    protected processGetOdata(response: HttpResponseBase): Observable<OrderManagedPageResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderManagedPageResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("BadRequest", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderManagedPageResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    upsert(body?: Order | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("BadRequest", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Forbidden", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("BadRequest", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class Enum implements IEnum {

    constructor(data?: IEnum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Enum {
        data = typeof data === 'object' ? data : {};
        let result = new Enum();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IEnum {
}

export class GetOrdersManagedPageDto implements IGetOrdersManagedPageDto {
    items?: Order[] | null;
    totalCount?: number | null;
    nextPageLink?: string | null;
    cuttingDuration?: string;
    preparationDuration?: string;
    bendingDuration?: string;
    assemblyDuration?: string;

    constructor(data?: IGetOrdersManagedPageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Order.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.nextPageLink = _data["nextPageLink"] !== undefined ? _data["nextPageLink"] : <any>null;
            this.cuttingDuration = _data["cuttingDuration"] !== undefined ? _data["cuttingDuration"] : <any>null;
            this.preparationDuration = _data["preparationDuration"] !== undefined ? _data["preparationDuration"] : <any>null;
            this.bendingDuration = _data["bendingDuration"] !== undefined ? _data["bendingDuration"] : <any>null;
            this.assemblyDuration = _data["assemblyDuration"] !== undefined ? _data["assemblyDuration"] : <any>null;
        }
    }

    static fromJS(data: any): GetOrdersManagedPageDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrdersManagedPageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["nextPageLink"] = this.nextPageLink !== undefined ? this.nextPageLink : <any>null;
        data["cuttingDuration"] = this.cuttingDuration !== undefined ? this.cuttingDuration : <any>null;
        data["preparationDuration"] = this.preparationDuration !== undefined ? this.preparationDuration : <any>null;
        data["bendingDuration"] = this.bendingDuration !== undefined ? this.bendingDuration : <any>null;
        data["assemblyDuration"] = this.assemblyDuration !== undefined ? this.assemblyDuration : <any>null;
        return data;
    }
}

export interface IGetOrdersManagedPageDto {
    items?: Order[] | null;
    totalCount?: number | null;
    nextPageLink?: string | null;
    cuttingDuration?: string;
    preparationDuration?: string;
    bendingDuration?: string;
    assemblyDuration?: string;
}

export class GetOrdersQuery implements IGetOrdersQuery {
    computeDurations?: boolean;

    constructor(data?: IGetOrdersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.computeDurations = _data["computeDurations"] !== undefined ? _data["computeDurations"] : <any>null;
        }
    }

    static fromJS(data: any): GetOrdersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrdersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["computeDurations"] = this.computeDurations !== undefined ? this.computeDurations : <any>null;
        return data;
    }
}

export interface IGetOrdersQuery {
    computeDurations?: boolean;
}

export class Order implements IOrder {
    id?: number;
    orderNumber?: string | null;
    customer?: string | null;
    note?: string | null;
    cuttingScheduledDate?: string | null;
    cuttingStartDate?: Date | null;
    cuttingEndDate?: Date | null;
    preparationScheduledDate?: string | null;
    preparationStartDate?: Date | null;
    preparationEndDate?: Date | null;
    bendingScheduledDate?: string | null;
    bendingStartDate?: Date | null;
    bendingEndDate?: Date | null;
    assemblyScheduledDate?: string | null;
    assemblyStartDate?: Date | null;
    assemblyEndDate?: Date | null;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.orderNumber = _data["orderNumber"] !== undefined ? _data["orderNumber"] : <any>null;
            this.customer = _data["customer"] !== undefined ? _data["customer"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.cuttingScheduledDate = _data["cuttingScheduledDate"] !== undefined ? _data["cuttingScheduledDate"] : <any>null;
            this.cuttingStartDate = _data["cuttingStartDate"] ? new Date(_data["cuttingStartDate"].toString()) : <any>null;
            this.cuttingEndDate = _data["cuttingEndDate"] ? new Date(_data["cuttingEndDate"].toString()) : <any>null;
            this.preparationScheduledDate = _data["preparationScheduledDate"] !== undefined ? _data["preparationScheduledDate"] : <any>null;
            this.preparationStartDate = _data["preparationStartDate"] ? new Date(_data["preparationStartDate"].toString()) : <any>null;
            this.preparationEndDate = _data["preparationEndDate"] ? new Date(_data["preparationEndDate"].toString()) : <any>null;
            this.bendingScheduledDate = _data["bendingScheduledDate"] !== undefined ? _data["bendingScheduledDate"] : <any>null;
            this.bendingStartDate = _data["bendingStartDate"] ? new Date(_data["bendingStartDate"].toString()) : <any>null;
            this.bendingEndDate = _data["bendingEndDate"] ? new Date(_data["bendingEndDate"].toString()) : <any>null;
            this.assemblyScheduledDate = _data["assemblyScheduledDate"] !== undefined ? _data["assemblyScheduledDate"] : <any>null;
            this.assemblyStartDate = _data["assemblyStartDate"] ? new Date(_data["assemblyStartDate"].toString()) : <any>null;
            this.assemblyEndDate = _data["assemblyEndDate"] ? new Date(_data["assemblyEndDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["orderNumber"] = this.orderNumber !== undefined ? this.orderNumber : <any>null;
        data["customer"] = this.customer !== undefined ? this.customer : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["cuttingScheduledDate"] = this.cuttingScheduledDate !== undefined ? this.cuttingScheduledDate : <any>null;
        data["cuttingStartDate"] = this.cuttingStartDate ? this.cuttingStartDate.toISOString() : <any>null;
        data["cuttingEndDate"] = this.cuttingEndDate ? this.cuttingEndDate.toISOString() : <any>null;
        data["preparationScheduledDate"] = this.preparationScheduledDate !== undefined ? this.preparationScheduledDate : <any>null;
        data["preparationStartDate"] = this.preparationStartDate ? this.preparationStartDate.toISOString() : <any>null;
        data["preparationEndDate"] = this.preparationEndDate ? this.preparationEndDate.toISOString() : <any>null;
        data["bendingScheduledDate"] = this.bendingScheduledDate !== undefined ? this.bendingScheduledDate : <any>null;
        data["bendingStartDate"] = this.bendingStartDate ? this.bendingStartDate.toISOString() : <any>null;
        data["bendingEndDate"] = this.bendingEndDate ? this.bendingEndDate.toISOString() : <any>null;
        data["assemblyScheduledDate"] = this.assemblyScheduledDate !== undefined ? this.assemblyScheduledDate : <any>null;
        data["assemblyStartDate"] = this.assemblyStartDate ? this.assemblyStartDate.toISOString() : <any>null;
        data["assemblyEndDate"] = this.assemblyEndDate ? this.assemblyEndDate.toISOString() : <any>null;
        return data;
    }
}

export interface IOrder {
    id?: number;
    orderNumber?: string | null;
    customer?: string | null;
    note?: string | null;
    cuttingScheduledDate?: string | null;
    cuttingStartDate?: Date | null;
    cuttingEndDate?: Date | null;
    preparationScheduledDate?: string | null;
    preparationStartDate?: Date | null;
    preparationEndDate?: Date | null;
    bendingScheduledDate?: string | null;
    bendingStartDate?: Date | null;
    bendingEndDate?: Date | null;
    assemblyScheduledDate?: string | null;
    assemblyStartDate?: Date | null;
    assemblyEndDate?: Date | null;
}

export class OrderManagedPageResult implements IOrderManagedPageResult {
    items?: Order[] | null;
    totalCount?: number | null;
    nextPageLink?: string | null;

    constructor(data?: IOrderManagedPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Order.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.nextPageLink = _data["nextPageLink"] !== undefined ? _data["nextPageLink"] : <any>null;
        }
    }

    static fromJS(data: any): OrderManagedPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new OrderManagedPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["nextPageLink"] = this.nextPageLink !== undefined ? this.nextPageLink : <any>null;
        return data;
    }
}

export interface IOrderManagedPageResult {
    items?: Order[] | null;
    totalCount?: number | null;
    nextPageLink?: string | null;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}